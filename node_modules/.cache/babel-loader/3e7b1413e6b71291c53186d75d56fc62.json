{"ast":null,"code":"var _jsxFileName = \"/home/mariana/Documents/Financas/src/components/Hooks/TransactionsContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { api } from \"../../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionContext = /*#__PURE__*/createContext({});\nexport const TransactionProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    api.get('transactions').then(response => setTransactions(response.data.transactions));\n  }, []);\n\n  async function createTransaction(transactionInput) {\n    const response = await api.post('/transactions', { ...transactionInput,\n      createdAt: new Date()\n    });\n    const {\n      transaction\n    } = response.data;\n    setTransactions([...transactions, transaction]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      transactions,\n      createTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 7\n  }, this);\n};\n\n_s(TransactionProvider, \"tSC852gg/pAfbHr6jYEePbawnUU=\");\n\n_c = TransactionProvider;\nexport const useTransactions = () => {\n  _s2();\n\n  const contex = useContext(TransactionContext);\n  return contex;\n}; // import { createContext, ReactNode, useEffect, useState } from \"react\";\n// import { api } from \"../../services/api\";\n// interface Transaction {\n//     id: number;\n//     title: string;\n//     amount: number;\n//     type: string;\n//     category: string;\n//     createdAt: string;\n// }\n// type TransactionInput = Omit<Transaction, 'id' | 'createdAt'>;\n// interface TransactionsProviderProps {\n//     children: ReactNode;\n// }\n// interface TransactionContextData {\n//     transaction?: Transaction[];\n//     createTransaction: (transaction: TransactionInput) => void;\n// }\n// export const TransactionsContext = createContext<TransactionContextData>(\n//     {} as TransactionContextData\n// );\n// export function TransactionsProvider({ children } : TransactionsProviderProps) {\n//     const [transactions, setTransactions] = useState<Transaction[]>([]);\n//     useEffect(() => {\n//         api.get('transactions')\n//         .then(response => setTransactions(response.data.transactions))\n//     }, []);\n//     function createTransaction(transaction : TransactionInput) {\n//         api.post('/transactions', transaction)\n//     }\n//     return (\n//     <TransactionsContext.Provider value={{transactions, createTransaction }}>\n//         {children}\n//     </TransactionsContext.Provider>\n//     );\n// }\n\n_s2(useTransactions, \"maUxpjB+CowHcq1+hEdsbAeq6Sk=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"sources":["/home/mariana/Documents/Financas/src/components/Hooks/TransactionsContext.tsx"],"names":["createContext","useContext","useEffect","useState","api","TransactionContext","TransactionProvider","children","transactions","setTransactions","get","then","response","data","createTransaction","transactionInput","post","createdAt","Date","transaction","useTransactions","contex"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,GAAT,QAAoB,oBAApB;;AAsBE,MAAMC,kBAAkB,gBAAGL,aAAa,CACtC,EADsC,CAAxC;AAIA,OAAO,MAAMM,mBAAmB,GAAG,QAA6C;AAAA;;AAAA,MAA5C;AAAEC,IAAAA;AAAF,GAA4C;AAC9E,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAiB,EAAjB,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,GAAG,CAACM,GAAJ,CAAQ,cAAR,EACGC,IADH,CACQC,QAAQ,IAAIH,eAAe,CAACG,QAAQ,CAACC,IAAT,CAAcL,YAAf,CADnC;AAED,GAHQ,EAGN,EAHM,CAAT;;AAKA,iBAAeM,iBAAf,CAAiCC,gBAAjC,EAAqE;AACnE,UAAMH,QAAQ,GAAG,MAAMR,GAAG,CAACY,IAAJ,CAAS,eAAT,EAA0B,EAC/C,GAAGD,gBAD4C;AAE/CE,MAAAA,SAAS,EAAE,IAAIC,IAAJ;AAFoC,KAA1B,CAAvB;AAIA,UAAM;AAAEC,MAAAA;AAAF,QAAkBP,QAAQ,CAACC,IAAjC;AACAJ,IAAAA,eAAe,CAAC,CAAC,GAAGD,YAAJ,EAAkBW,WAAlB,CAAD,CAAf;AACD;;AAED,sBACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE;AAAEX,MAAAA,YAAF;AAAgBM,MAAAA;AAAhB,KAApC;AAAA,cACGP;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAtBM;;GAAMD,mB;;KAAAA,mB;AAwBb,OAAO,MAAMc,eAAe,GAAG,MAAM;AAAA;;AACnC,QAAMC,MAAM,GAAGpB,UAAU,CAACI,kBAAD,CAAzB;AACA,SAAOgB,MAAP;AACD,CAHM,C,CAKT;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;IAjDeD,e","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\nimport { api } from \"../../services/api\";\n  \n  interface Transactions {\n    id: number;\n    title: string;\n    type: string\n    category: string\n    amount: number;\n    createdAt: string;\n  }\n  \n  type TransactionInput = Omit<Transactions, 'id' | 'createdAt'>\n  \n  interface TransactionsProviderProps {\n    children: ReactNode;\n  }\n  \n  interface TransactionContextData {\n    transactions: Transactions[];\n    createTransaction: (transaction: TransactionInput) => void;\n  }\n  \n  const TransactionContext = createContext<TransactionContextData>(\n    {} as TransactionContextData\n  );\n  \n  export const TransactionProvider = ({ children }: TransactionsProviderProps) => {\n    const [transactions, setTransactions] = useState<Transactions[]>([]);\n  \n    useEffect(() => {\n      api.get('transactions')\n        .then(response => setTransactions(response.data.transactions));\n    }, []);\n  \n    async function createTransaction(transactionInput: TransactionInput) {\n      const response = await api.post('/transactions', {\n        ...transactionInput,\n        createdAt: new Date()\n      });\n      const { transaction } = response.data;\n      setTransactions([...transactions, transaction]);\n    }\n  \n    return (\n      <TransactionContext.Provider value={{ transactions, createTransaction }}>\n        {children}\n      </TransactionContext.Provider>\n    );\n  };\n  \n  export const useTransactions = () => {\n    const contex = useContext(TransactionContext);\n    return contex;\n  }\n\n// import { createContext, ReactNode, useEffect, useState } from \"react\";\n// import { api } from \"../../services/api\";\n\n// interface Transaction {\n//     id: number;\n//     title: string;\n//     amount: number;\n//     type: string;\n//     category: string;\n//     createdAt: string;\n// }\n\n// type TransactionInput = Omit<Transaction, 'id' | 'createdAt'>;\n\n// interface TransactionsProviderProps {\n//     children: ReactNode;\n// }\n\n// interface TransactionContextData {\n//     transaction?: Transaction[];\n//     createTransaction: (transaction: TransactionInput) => void;\n// }\n\n// export const TransactionsContext = createContext<TransactionContextData>(\n//     {} as TransactionContextData\n// );\n\n// export function TransactionsProvider({ children } : TransactionsProviderProps) {\n//     const [transactions, setTransactions] = useState<Transaction[]>([]);\n\n//     useEffect(() => {\n//         api.get('transactions')\n//         .then(response => setTransactions(response.data.transactions))\n//     }, []);\n\n//     function createTransaction(transaction : TransactionInput) {\n//         api.post('/transactions', transaction)\n//     }\n\n//     return (\n//     <TransactionsContext.Provider value={{transactions, createTransaction }}>\n//         {children}\n//     </TransactionsContext.Provider>\n//     );\n// }"]},"metadata":{},"sourceType":"module"}